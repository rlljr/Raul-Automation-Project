03_String_Methods

username = 'admin1'
# print(dir(username))
# print(username.capitalize()) #Output Admin1
# print(username.casefold())#Output admin1
# print(username.center(20), "Hi") # will return centered string with length we defined #Output:      admin1        Hi
user_input = input("Enter Username:").casefold().strip() #casefold will ignore case, strip will remove leading and trailing whitespaces from the output
if user_input == username:
    print(f"Input {user_input} matched")
else:
    print("Not matched")

Terminal Output:
Enter Username:Admin1   
Input admin1 matched

Process finished with exit code 0

#If we want to ignore spaces in between characters, use the code below



user_input = input("Enter Username:").casefold().strip().replace(" ","") #casefold will ignore case, strip will remove leading and trailing whitespaces from the output
if user_input == username:
    print(f"Input {user_input} matched")
else:
    print("Not matched")

Terminal input/output:
Enter Username:A d M i n 1 # notice there's spaces here
Input admin1 matched


------------------------------------------------------------------------------------------


ip = '192.168.0.1'
device = 'router'
print(f"IP Address is: {0}\nDevice type is: {1}")

Terminal Output:
IP Address is: 192.168.0.1
Device type is: router


#another way to do this is by. Terminal Output would be the same
ip = '192.168.0.1'
device = 'router'
print(f"IP Address is: {ip}\nDevice type is: {device}".format(ip,device))


------------------------------------------------------------------------------------------
username = 'admin1'
'''find'''
print(username.find('2')) # this will try to find index 2 in the string.

Terminal Output:
-1#indicates its not there

#you can't use index on string. it will give an exception
print(username.index('2'))

Terminal Output:
Traceback (most recent call last):
  File "/Users/rlimlatjr/PycharmProjects/Raul-Automation-Project/03_String_Methods/01_string_methods.py", line 24, in <module>
    print(username.index('2'))
ValueError: substring not found

------------------------------------------------------------------------------------------

'''is decimal'''
a_number = '\u0035'
print(a_number)

Terminal output:
5 #unicode of u0035 is 35. if you put small u instead of capital u, you only need to have 4 characters so add "00"


'''is decimal'''
a_number = '\u0035'
print(a_number)
print(a_number.isdigit())#to verify if \u0035 is a digit
print(a_number.isdecimal())
b_letter = 'A'
print(b_letter.isascii())


Terminal Output:
5
True # this verifies that \u0035 is a digit
True # this verifies that \u0035 is a digit
True # this verifies that b_letter is ascii

------------------------------------------------------------------------------------------

'''is identifier  a-z, A-Z, 0-9, _ : should not start with number'''
an_identifier = 'A123a_'
print(an_identifier.isidentifier())

Terminal Output:
True

------------------------------------------------------------------------------------------
'''printable'''
printable = 'Hey there'
print(printable.isprintable())

Terminal Output:
True

------------------------------------------------------------------------------------------
'''join'''
list1 = ['Cisco', "IOS", "17.3"]
print('-'.join(list1))
print('.'.join(list1))

Terminal output:

Cisco-IOS-17.3
Cisco.IOS.17.3

------------------------------------------------------------------------------------------
'''ljust''' # left justified 
print("abc".ljust(18), '12345')
print("abcabcabc".ljust(18), '12345')
print("abcabc".ljust(18), '12345')
print("abcrtui".ljust(18), '12345')

Terminal Output:
abc                12345
abcabcabc          12345
abcabc             12345
abcrtui            12345

------------------------------------------------------------------------------------------

'''maketrans'''
message = "Hey there.."
trans = message.maketrans('e.', 'E!')# replace e with E and replace . with !
print(message.translate(trans))

Terminal Output:
HEy thErE!!

------------------------------------------------------------------------------------------

# '''partition'''
message = "ip route 192.168.0.0"
print(message.partition(" route "))
#

Terminal Output:
('ip', ' route ', '192.168.0.0')

------------------------------------------------------------------------------------------
'''replace'''
message = "Hello there"
print(message.replace("there", "world"))

Terminal OUtput:
Hello world

------------------------------------------------------------------------------------------
# '''split'''
users = 'user1, user2, user3'
user_list = users.split(', ')
print(user_list)
for user in user_list:
    print(f"Username is: {user}")

'''splitlines'''
print("user1\nuser2\nuser3".splitlines())#this return the users in a list format


Terminal Output:
['user1', 'user2', 'user3']
Username is: user1
Username is: user2
Username is: user3
['user1', 'user2', 'user3']
------------------------------------------------------------------------------------------

'''translate'''
trans = {46: 33} #translation table #46 is decimal value for glyph value "." and 33 is decimal value for glyph value "!"
print("Hey there..".translate(trans))

Terminal Output:
Hey there!!

------------------------------------------------------------------------------------------

'''zfill''' #adds additional zero to complete the number of characters
print('abc'.zfill(5))

Terminal Output:
00abc


##########################################################################################
02_splitlines_methods.py


show_output = '''GigabitEthernet1       192.168.0.63    YES NVRAM  up                    up
GigabitEthernet2       unassigned      YES NVRAM  up                    up
GigabitEthernet3       unassigned      YES NVRAM  up                    up
GigabitEthernet4       unassigned      YES NVRAM  up                    up
Loopback1001           10.1.1.100      YES manual up                    up
Loopback1002           20.1.1.100      YES manual up                    up
'''
#
intf_lines = show_output.splitlines()
print(intf_lines)

Terminal output:
['GigabitEthernet1       192.168.0.63    YES NVRAM  up                    up', 'GigabitEthernet2       unassigned      YES NVRAM  up                    up', 'GigabitEthernet3       unassigned      YES NVRAM  up                    up', 'GigabitEthernet4       unassigned      YES NVRAM  up                    up', 'Loopback1001           10.1.1.100      YES manual up                    up', 'Loopback1002           20.1.1.100      YES manual up                    up']


------------------------------------------------------------------------------------------

intf_lines = show_output.splitlines()#create list. Each item in the list is from a line
print(intf_lines)
for intf in intf_lines:
    intf_details = intf.split()#create a new list for each item from the line ex. ['GigabitEthernet1', '192.168.0.63', 'YES', 'NVRAM', 'up', 'up']

    if intf_details[1] == 'unassigned':#if the the first element on the list has value of "unassigned, continue on the loop"
        continue
    print(f"Interface Name: {intf_details[0]} Interface IP {intf_details[1]}")

Terminal Output:
['GigabitEthernet1       192.168.0.63    YES NVRAM  up                    up', 'GigabitEthernet2       unassigned      YES NVRAM  up                    up', 'GigabitEthernet3       unassigned      YES NVRAM  up                    up', 'GigabitEthernet4       unassigned      YES NVRAM  up                    up', 'Loopback1001           10.1.1.100      YES manual up                    up', 'Loopback1002           20.1.1.100      YES manual up                    up']
Interface Name: GigabitEthernet1 Interface IP 192.168.0.63
Interface Name: Loopback1001 Interface IP 10.1.1.100
Interface Name: Loopback1002 Interface IP 20.1.1.100

------------------------------------------------------------------------------------------



with open('output.txt') as text:
    lines = text.readlines()#convert the lines from the file as a string
# print(lines)
    print("Press Enter..", end='')
    for line in lines:
        if input() == '':
            line = line.strip('\n') #remove the enter
            print(line, end='') #if dont set end='', there would still be newline on the output
    print("Completed")



################################################################################################################
03_generate_dynamic_filenames_with_timestamp.py

with open('show_commands.txt') as sh_cmd:
    commands = sh_cmd.readlines()
##time_seq_no_commands

# print(commands)
for cmd in enumerate(commands, start = 1):#enumerate will create a tuple, without the start=1, the tuple will start with 0
    print(cmd)

Terminal output:
(1, 'show running-config\n')
(2, 'show version\n')
(3, 'show ip interface brief\n')

---------------------------------------------------------------------------------------------------------------------
#if you want to only get the sequence number,
with open('show_commands.txt') as sh_cmd:
    commands = sh_cmd.readlines()
##time_seq_no_commands

# print(commands)
for cmd in enumerate(commands, start = 1):#enumerate will create a tuple, without the start=1, the tuple will start with 0
    print(cmd[0], cmd[1])

Terminal Output:
1 show running-config

2 show version

3 show ip interface brief

---------------------------------------------------------------------------------------------------------------------
#importing datetime


import datetime
with open('show_commands.txt') as sh_cmd:
    commands = sh_cmd.readlines()
##time_seq_no_commands

# print(commands)
now = datetime.datetime.now().replace(microsecond=0)#microsecond = 0 will ignore microsecond
for cmd in enumerate(commands, start = 1):#enumerate will create a tuple, without the start=1, the tuple will start with 0
    print(now,cmd[0], cmd[1])

Terminal Output:
2024-02-11 20:57:41 1 show running-config

2024-02-11 20:57:41 2 show version

2024-02-11 20:57:41 3 show ip interface brief

---------------------------------------------------------------------------------------------------------------------
import datetime
with open('show_commands.txt') as sh_cmd:
    commands = sh_cmd.readlines()
##time_seq_no_commands

# print(commands)
now = datetime.datetime.now().replace(microsecond=0)
for cmd in enumerate(commands, start = 1):#enumerate will create a tuple, without the start=1, the tuple will start with 0
    print(f"{now}_{cmd[0]}_{cmd[1]}.txt")

Terminal Output:#because there's a \n for each of the commands, we need to take it out.
2024-02-11 20:59:57_1_show running-config
.txt
2024-02-11 20:59:57_2_show version
.txt
2024-02-11 20:59:57_3_show ip interface brief
.txt

#modify line 315 from print(f"{now}_{cmd[0]}_{cmd[1]}.txt") to print(f"{now}_{cmd[0]}_{cmd[1].strip()}.txt")
for cmd in enumerate(commands, start = 1):#enumerate will create a tuple, without the start=1, the tuple will start with 0
    print(f"{now}_{cmd[0]}_{cmd[1].strip()}.txt")


Terminal output#notice that the output has spaces
2024-02-11 21:01:47_1_show running-config.txt
2024-02-11 21:01:47_2_show version.txt
2024-02-11 21:01:47_3_show ip interface brief.txt


###to remove the spaces, we can use replace
import datetime
with open('show_commands.txt') as sh_cmd:
    commands = sh_cmd.readlines()
##time_seq_no_commands

# print(commands)
now = datetime.datetime.now().replace(microsecond=0)
for cmd in enumerate(commands, start = 1):#enumerate will create a tuple, without the start=1, the tuple will start with 0
    print(f"{now}_{cmd[0].replace(' ', '')}_{cmd[1].strip().replace(' ','')}.txt")

#notice that there's also a space between the date and time. 
Terminal Output:
2024-02-11 21:04:32_1_showrunning-config.txt
2024-02-11 21:04:32_2_showversion.txt
2024-02-11 21:04:32_3_showipinterfacebrief.txt


---------------------------------------------------------------------------------------------------------------------
#To replace the space between the date and time with a colon. string cast now and then use replace.
import datetime
with open('show_commands.txt') as sh_cmd:
    commands = sh_cmd.readlines()
##time_seq_no_commands

# print(commands)
now = datetime.datetime.now().replace(microsecond=0)
for cmd in enumerate(commands, start = 1):#enumerate will create a tuple, without the start=1, the tuple will start with 0
    print(f"{str(now).replace(' ', ':')}_{cmd[0]}_{cmd[1].strip().replace(' ','')}.txt")

terminal Output:

2024-02-11:21:08:21_1_showrunning-config.txt
2024-02-11:21:08:21_2_showversion.txt
2024-02-11:21:08:21_3_showipinterfacebrief.txt


---------------------------------------------------------------------------------------------------------------------
username = 'admin'
password = 'cisco!123'
csr_cmd = ['show run']
with open('show_commands.txt', 'r') as conf_file:
    new_cmd = conf_file.readlines() #store the variable in new_cmd
print(new_cmd)

def cisco_cmd_executor(hostname, commands):
    try:
        print(f"Connecting to the device {hostname}..")
        now = datetime.datetime.now().replace(microsecond=0)
        current_conf_file = f"{now}_{hostname}.txt"
        ssh_client = client.SSHClient()
        ssh_client.set_missing_host_key_policy(client.AutoAddPolicy())
        ssh_client.connect(hostname=hostname, port=22, username=username, password=password, look_for_keys=False,
                           allow_agent=False)

        print(f"Connected to the device {hostname}")
        device_access = ssh_client.invoke_shell()
        device_access.send("terminal len 0\n")
        #with open(current_conf_file, 'w') as cmd_data: #we can remove this logic
        #the file creation would now be within the for loop
        for cmd in enumerate(commands, start = 1):
            file_name = f"{str(now).replace(' ', ':')}_{cmd[0]}_{cmd[1].strip().replace(' ', '')}.txt"
            with open(file_name, 'w') as cmd_data:
                device_access.send(f"{cmd[1]}\n")#we removed the \n here. If we don't it press enter
                time.sleep(1)
                output = device_access.recv(65535)
                cmd_data.write(output.decode())
                print(output.decode(), end='')

    except ssh_exception.NoValidConnectionsError:
        print("SSH Port not reachable")
    except socket.gaierror:
        print("Check the hostname")
    except ssh_exception.AuthenticationException:
        print("Authentication failed, check credentials")

    except:
        print("Exception Occurred")
        print(sys.exc_info())
        # traceback.print_exception(*sys.exc_info())

cisco_cmd_executor('172.16.20.154', new_cmd) #we need to pass the list to the csr_cmd function
